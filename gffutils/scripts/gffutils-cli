#!/usr/bin/python

"""
Command line interface for gffutils.

Developer notes
---------------

To implement or modify subcommands (e.g., "gffutils-cli fetch"), simply edit
the correspondingly-named functions.

Since the `argh` module is used to wrap functions into argparse.ArgumentParser
objects (and sub-parsers), just add an argument to the appropriate function and
you'll get the cli for free.
"""

import gffutils
import argh
from argcomplete.completers import EnvironCompleter
from argh import arg

# D.R.Y.
db_help = '''Database to use.  If a GFF or GTF file is provided instead for
this argument, a database will be created for you.  This can take some time
(several minutes), so it's best to create one ahead of time.'''


def handle_relations_args(ids, limit, exclude):
    """
    Handle args for children or parents subcommands
    """
    if limit:
        raise NotImplementedError('sorry, still working on --limit')
    if ids is None:
        ids = gffdb.features_of_type('gene')
    else:
        ids = ids.split(',')
    exclude = (exclude or "").split(',')
    return ids, limit, exclude


# fetch subcommand ------------------------------------------------------------
@arg('db', help=db_help)
@arg('ids', help='Comma-separated list of IDs to fetch')
def fetch(db, ids):
    """
    Fetch IDs.
    """
    gffdb = gffutils.FeatureDB(db)
    for i in ids.split(','):
        yield gffdb[i]


# children subcommand ---------------------------------------------------------
@arg('db', help=db_help)
@arg('ids', nargs='?', help='''Comma-separated list of IDs. These IDs, along
     with their children, will be returned (subject to --limit and --exclude).
     If none provided, use all genes in the database''')
@arg('--limit', help='''Feature type (string), or level (integer).  No children
     below this level will be returned''')
@arg('--exclude', help='''Comma-separated list of featuretypes to filter out
     (like grep -v)''')
@arg('--exclude-self', help='''Use this to suppress reporting the IDs you've
     provided.''')
def children(db, ids, limit=None, exclude=None, exclude_self=False):
    """
    Fetch children from the database according to ID.
    """
    gffdb = gffutils.FeatureDB(db)
    ids, limit, exclude = handle_relations_args(ids, limit, exclude)

    for i in ids:
        f = gffdb[i]
        if f.featuretype in exclude:
            continue
        if not exclude_self:
            yield f
        for child1 in gffdb.children(i):
            if child1.featuretype in exclude:
                continue
            yield child1
            for child2 in gffdb.children(child1):
                if child2.featuretype in exclude:
                    continue
                yield child2


# parents subcommand ----------------------------------------------------------
@arg('db', help=db_help)
@arg('ids', nargs='?', help='''Comma-separated list of IDs. These IDs, along
     with their parents, will be returned (subject to --limit and --exclude).
     If none provided, use all exons in the database''')
@arg('--limit', help='''Feature type (string), or level (integer).  No parents
     below this level will be returned''')
@arg('--exclude', help='''Comma-separated list of featuretypes to filter out
     (like grep -v)''')
@arg('--exclude-self', help='''Use this to suppress reporting the IDs you've
     provided.''')
def parents(db, ids, limit=None, exclude=None, exclude_self=False):
    """
    Fetch parents from the database according to ID.
    """
    gffdb = gffutils.FeatureDB(db)
    ids, limit, exclude = handle_relations_args(ids, limit, exclude)
    for i in ids:
        f = gffdb[i]
        if f.featuretype in exclude:
            continue
        if not exclude_self:
            yield f
        for parent1 in gffdb.parents(i):
            if parent1.featuretype in exclude:
                continue
            yield parent1
            for parent2 in gffdb.parents(parent1):
                if parent2.featuretype in exclude:
                    continue
                yield parent2


# region subcommand -----------------------------------------------------------
@arg('db', help=db_help)
@arg('region', help='Genomic coordinates of the form "chrom:start-stop"')
def region(db, region):
    """
    Returns features within provided genomic coordinates.
    """
    raise NotImplementedError('sorry, still working on "region"')


# common subcommand------------------------------------------------------------
@arg('db', help=db_help)
def common(db):
    """
    Identify child features in common (e.g., common exons across multiple
    isoforms)
    """
    raise NotImplementedError('sorry, still working on "common"')


# create subcommand------------------------------------------------------------
@arg('filename', help='GFF or GTF file to use')
@arg('--output', help='''Database to create.  Default is to append ".db" to the
     end of the input filename''')
@arg('--force', help='''Overwrite an existing database''')
@arg('--quiet', help='''Suppress the reporting of timing information when
     creating the database''')
def create(filename, output=None, force=False, quiet=False):
    """
    Create a database.
    """
    verbose = not quiet
    if output is None:
        output = filename + '.db'
    gffutils.create_db(filename, output, force=force, verbose=verbose)


# clean subcommand ------------------------------------------------------------
@arg('filename', help='''GFF or GTF file to use''')
def clean(filename):
    """
    Perform various QC operations to clean a GFF or GTF file.
    """
    raise NotImplementedError('sorry, still working on "clean"')


# search subcommand -----------------------------------------------------------
@arg('db', help=db_help)
@arg('text', help='''Text to search for. Case-insensitive; use sql LIKE
     syntax''')
@arg('--featuretype', help='''Restrict to a particular featuretype.  This can
     be faster than doing a grep on the output, since it restricts the search
     space in the database''')
def search(db, text, featuretype=None):
    """
    Search the attributes.
    """
    gffdb = gffutils.FeatureDB(db)
    for item in gffdb.attribute_search(text, featuretype):
        yield item


if __name__ == "__main__":
    argh.dispatch_commands([
        fetch,
        children,
        parents,
        region,
        create,
        common,
        clean,
        search,
    ])
